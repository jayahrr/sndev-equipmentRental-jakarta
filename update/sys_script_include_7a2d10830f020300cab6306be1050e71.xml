<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_68580_equipmentr.AJAXRentalPriceUtil</api_name>
        <client_callable>true</client_callable>
        <description>AJAX utility for the Equipment Rental Application. Price method calculates the estimated price of a rental request using the equipment's rental rate and the duration of the rental in hours. Duration method calculates the duration between pick-up and drop-off dates. </description>
        <name>AJAXRentalPriceUtil</name>
        <script><![CDATA[var AJAXRentalPriceUtil = Class.create();
AJAXRentalPriceUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	price: function (duration, equipment) {
		/**
		 *  Description: Calculates the estimated price of the rental using the 
		 *  equipment's rental rate and the rental's duration. 
		 *  
		 *  @param duration/sysparm_duration: string, usually from u_rental_duration 
		 *  @param equipment/sysparm_equipment: string, sys_id of the equipment
		 * 
		 *  @returns string of estimated price
		 */

		// Store parameters in variables
		var rentalDur = duration ? duration : this.getParameter('sysparm_duration');
		var rentalEqp = equipment ? equipment : this.getParameter('sysparm_equipment');

		// Stores rental duration as GlideDateTime object and extracts the hours
		var gdt = new GlideDateTime(rentalDur); 
		var hrs = gdt.getNumericValue()/3600000; // 3600000 milliseconds per hour

		// Acquire Rental Equipment's Rental Rate
		var gr = new GlideRecord('cmdb_ci_computer');
			gr.get(rentalEqp);
		var pricePerHr = gr.x_68580_equipmentr_rental_rate;

		// Calculate the estimated price - Rental Rate * Rental Duration
		var price = hrs * pricePerHr;

		// Return the estimated price
		return price;
	},

	durationClient: function (start, end, scheduleID, ticketNumber) {
		/**
		 *  Description: Calculates the duration time of the rental using the 
		 *  the rental's pick up and drop off date values, and a specified schedule. 
		 *  
		 *  @param start/sysparm_start: string, usually from u_rental_start 
		 *  @param end/sysparm_end: string, usually from u_rental_end
		 *  @param schedule/sysparm_schedule: string, sys_id of the schedule to use
		 *  @param ticketNumber/sysparm_number: string, usually from number
		 * 
		 *  @returns string of duration time formatted as a GlideDateTime
		 */

		// Store parameters in variables
		var rentalStart = start ? start : this.getParameter('sysparm_start');
		var rentalEnd = end ? end : this.getParameter('sysparm_end');
		var schedID = scheduleID ? scheduleID : this.getParameter('sysparm_schedule');
		var number = ticketNumber ? ticketNumber : this.getParameter('sysparm_number');

		// Store start and end dates as GlideObjects
		var gdtStart = new GlideDateTime(rentalStart);
		var gdtEnd = new GlideDateTime(rentalEnd);

		try {  
			// Create schedule - pass in the sys_id of your standard work day schedule   
			var sched = new GlideSchedule(schedID);  
			// Store duration gdt object based on schedule/system timezone  
			var duration = sched.duration(gdtStart, gdtEnd);  
			// Store duration in hours only
			var durationHrs = duration.getNumericValue()/3600000;

			// Create a new item for this result that contains  both gdt and hrs formats
			var result = this.newItem("result");
			result.setAttribute('gdt', duration + '');
			result.setAttribute('hrs', durationHrs.toFixed(2) + '');

		} catch(e) {  
			gs.error('Error calculating rental duration for: ' + number + e);  
		}

	},

	durationServer: function (start, end, scheduleID, ticketNumber) {
		/**
		 *  Description: Calculates the duration time of the rental using the 
		 *  the rental's pick up and drop off date values, and a specified schedule. 
		 *  
		 *  @param start/sysparm_start: string, usually from u_rental_start 
		 *  @param end/sysparm_end: string, usually from u_rental_end
		 *  @param schedule/sysparm_schedule: string, sys_id of the schedule to use
		 *  @param ticketNumber/sysparm_number: string, usually from number
		 * 
		 *  @returns string of duration time formatted as a GlideDateTime
		 */

		// Store parameters in variables
		var rentalStart = start ? start : this.getParameter('sysparm_start');
		var rentalEnd = end ? end : this.getParameter('sysparm_end');
		var schedID = scheduleID ? scheduleID : this.getParameter('sysparm_schedule');
		var number = ticketNumber ? ticketNumber : this.getParameter('sysparm_number');

		// Store start and end dates as GlideObjects
		var gdtStart = new GlideDateTime(rentalStart);
		var gdtEnd = new GlideDateTime(rentalEnd);

		try {  
			// Create schedule - pass in the sys_id of your standard work day schedule   
			var sched = new GlideSchedule(schedID);  
			// Store duration gdt object based on schedule/system timezone  
			var duration = sched.duration(gdtStart, gdtEnd);  

			// Return the duration gdt 
			return duration;

		} catch(e) {  
			gs.error('Error calculating rental duration for: ' + number + e);  
		}

	},

	type: 'AJAXRentalPriceUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-10-30 22:19:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7a2d10830f020300cab6306be1050e71</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>AJAXRentalPriceUtil</sys_name>
        <sys_package display_value="EquipmentRental" source="x_68580_equipmentr">0f1ac1790fce0300cab6306be1050eaa</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="EquipmentRental">0f1ac1790fce0300cab6306be1050eaa</sys_scope>
        <sys_update_name>sys_script_include_7a2d10830f020300cab6306be1050e71</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-10-31 23:42:18</sys_updated_on>
    </sys_script_include>
</record_update>
